/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef interface_TYPES_H
#define interface_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class User;

typedef struct _User__isset {
  _User__isset() : uid(false), uname(false), usex(false), uage(false) {}
  bool uid :1;
  bool uname :1;
  bool usex :1;
  bool uage :1;
} _User__isset;

class User {
 public:

  User(const User&);
  User& operator=(const User&);
  User() : uid(), uname(), usex(0), uage(0) {
  }

  virtual ~User() throw();
  std::string uid;
  std::string uname;
  bool usex;
  int16_t uage;

  _User__isset __isset;

  void __set_uid(const std::string& val);

  void __set_uname(const std::string& val);

  void __set_usex(const bool val);

  void __set_uage(const int16_t val);

  bool operator == (const User & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(uname == rhs.uname))
      return false;
    if (!(usex == rhs.usex))
      return false;
    if (!(uage == rhs.uage))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b);

inline std::ostream& operator<<(std::ostream& out, const User& obj)
{
  obj.printTo(out);
  return out;
}



#endif
